module uart_tx (
    input clk,
    input reset,
    input tx_start,
    input [7:0] data_in,
    output reg tx,
    output reg tx_busy
);

parameter CLK_PER_BIT = 10416;

// STATE ENCODING
parameter IDLE = 2'b00;
parameter START = 2'b01;
parameter DATA = 2'b10;
parameter STOP = 2'b11;

reg [1:0] state;
reg [13:0] clk_count;
reg [3:0] bit_index;
reg [9:0] tx_shift_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        state <= IDLE;
        clk_count <= 0;
        bit_index <= 0;
        tx <= 1'b1;
        tx_busy <= 0;
    end else begin
        case (state)
            IDLE: begin
                tx <= 1'b1;
                clk_count <= 0;
                bit_index <= 0;
                tx_busy <= 0;
                if (tx_start) begin
                    tx_shift_reg <= {1'b1, data_in, 1'b0}; // stop + data + start
                    tx_busy <= 1;
                    state <= START;
                end
            end

            START, DATA, STOP: begin
                if (clk_count < CLK_PER_BIT - 1)
                    clk_count <= clk_count + 1;
                else begin
                    clk_count <= 0;
                    tx <= tx_shift_reg[bit_index];
                    bit_index <= bit_index + 1;
                    if (bit_index == 9)
                        state <= IDLE;
                end
            end
        endcase
    end
end

endmodule
