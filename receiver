module uart_rx (
    input clk,
    input reset,
    input rx,
    output reg [7:0] data_out,
    output reg rx_done
);

parameter CLK_PER_BIT = 10416;

// STATE ENCODING for FSM
parameter IDLE = 2'b00;
parameter START = 2'b01;
parameter DATA = 2'b10;
parameter STOP = 2'b11;

reg [1:0] state;
reg [13:0] clk_count;
reg [3:0] bit_index;
reg [7:0] rx_shift_reg;
reg rx_sync1, rx_sync2;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        state <= IDLE;
        rx_done <= 0;
        clk_count <= 0;
        bit_index <= 0;
    end else begin
        // Double-flop synchronizer to prevent metastability
        rx_sync1 <= rx;
        rx_sync2 <= rx_sync1;

        case (state)
            IDLE: begin
                rx_done <= 0;
                clk_count <= 0;
                bit_index <= 0;
                if (rx_sync2 == 0) begin // Detect start bit (0)
                    state <= START;
                end
            end

            START: begin
                if (clk_count == (CLK_PER_BIT >> 1)) begin // Middle of start bit
                    clk_count <= 0;
                    state <= DATA;
                end else begin
                    clk_count <= clk_count + 1;
                end
            end

            DATA: begin
                if (clk_count < CLK_PER_BIT - 1) begin
                    clk_count <= clk_count + 1;
                end else begin
                    clk_count <= 0;
                    rx_shift_reg[bit_index] <= rx_sync2;
                    if (bit_index == 7) begin
                        bit_index <= 0;
                        state <= STOP;
                    end else begin
                        bit_index <= bit_index + 1;
                    end
                end
            end

            STOP: begin
                if (clk_count < CLK_PER_BIT - 1) begin
                    clk_count <= clk_count + 1;
                end else begin
                    clk_count <= 0;
                    data_out <= rx_shift_reg;
                    rx_done <= 1;
                    state <= IDLE;
                end
            end
        endcase
    end
end

endmodule

